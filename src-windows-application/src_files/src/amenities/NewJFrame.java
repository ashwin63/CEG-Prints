/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amenities;

import com.documents4j.api.DocumentType;
import com.documents4j.api.IConverter;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.print.PrinterJob;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;
import java.util.concurrent.ScheduledExecutorService;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.MediaSizeName;
import javax.print.attribute.standard.OrientationRequested;
import javax.print.attribute.standard.Sides;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.printing.PDFPageable;
import org.docx4j.Docx4J;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;

/**
 *
 * @author ashwi
 */
 
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public boolean checker=false;
    public NewJFrame() {
        
        initComponents();
                jButton1.setIcon((Icon) new javax.swing.ImageIcon("CrunchifyQR.png")); // NOI18N
        
        fetch();
        initialize();
    }
    public void initialize()
    {
         try{
            if(flag)
            {
            s=new Server();
checker=true;
            Thread t1=new Thread(s);
            t1.start();
              
         
                
           
      
            }
            else
            {
                s.stop();
                
                restart();
            }
            //jTextField1.setText("hiiii");
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        panel1 = new java.awt.Panel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "File Name", "No Of Copies", "Color"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );

        panel1.setBackground(new java.awt.Color(8, 33, 55));
        panel1.setMaximumSize(new java.awt.Dimension(52767, 32767));

        jToggleButton1.setBackground(new java.awt.Color(71, 142, 204));
        jToggleButton1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jToggleButton1.setForeground(java.awt.Color.white);
        jToggleButton1.setText("Start");
        jToggleButton1.setToolTipText("");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/amenities/CrunchifyQR.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/amenities/ctf-01 (1).png"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/amenities/for queries-01 (2).png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/amenities/ctf project-01 (2).png"))); // NOI18N
        jLabel3.setText("jLabel3");

        jLabel4.setFont(new java.awt.Font("Yu Gothic", 1, 48)); // NOI18N
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("      CEG PRINTS");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Ensure the button below is showing RUNNING");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(274, 274, 274)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addGap(530, 530, 530)
                                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(440, 440, 440)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 367, Short.MAX_VALUE))
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        Server s;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    boolean flag=true;
    @SuppressWarnings("empty-statement")
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        initialize();
        
       
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    //.......................................
    int port=5000;
    public void close(){
 
 WindowEvent winClosingEvent = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
 Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
 
 }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
//function startServer to start server
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private java.awt.Panel panel1;
    // End of variables declaration//GEN-END:variables
    private void fetch() {
//        DefaultTableModel model=(DefaultTableModel)jTable2.getModel();

       Scanner s = null;
        try {
            s = new Scanner(new File("logfile.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        while(s.hasNext())
      {
          String line=s.nextLine();
          Scanner rs=new Scanner(line).useDelimiter("::");
         System.out.println(line);
//         model.addRow(new Object[]{rs.next(),rs.next(),rs.next(),rs.next()});
        //System.out.println(rs.getString(1)+"  "+rs.getString(2));  
      }
    }

    /*void setTable(String line)
    {
               Scanner rs=new Scanner(line).useDelimiter("::");
         System.out.println(line);
         model.addRow(new Object[]{rs.next(),rs.next(),rs.next(),rs.next()});
   
    }*/

    private void restart() {
    
        ScheduledExecutorService schedulerExecutor = Executors.newScheduledThreadPool(2);
        Callable<Process> callable = new Callable<Process>() {
        
            public Process call() throws Exception {
            Process p = Runtime.getRuntime().exec("cmd /c start /b java -jar amenities.jar");
            return p;
            }
        };
        FutureTask<Process> futureTask = new FutureTask<Process>(callable);
         schedulerExecutor.submit(futureTask);           

        System.exit(0);
        }

    
    
    //.........................................................................
    class  Server implements Runnable {

    /*
     * @param args the command line arguments
     */
    int id=0;
    boolean statusvalue=false;
    private volatile boolean exit=false;
   
    public void startServer(int port) throws IOException
    {
    }
    public boolean statusvalue()
    {
     return statusvalue;   
    }
    
    @Override
    public void run() {
        exit=true;
        while(exit){
        
        ServerSocket server = null;
        Socket client=null;
        try {
            server = new ServerSocket(7777);
         client=new Socket();
        if(server!=null){
            System.out.println("Socket Created");
           if(checker){
            informuser();
          // jToggleButton1.setText("Running");
            //             flag=false;
            checker=false;
           }
           else
           {
               
           }
        }
        else{
            System.out.println("Socket Creation Failed");
            informusernegative();
        }
        client=server.accept();
        if(client!=null)
            System.out.println("Client Connected");
        client.setTcpNoDelay(true);
                        DataInputStream input=new DataInputStream(client.getInputStream());
                        String sam=input.readUTF();
                        System.out.println("the receives text is"+sam);
                        OutputStream output=client.getOutputStream();
                        int copies=input.readInt();
                        int color=input.readInt();
                        int nooffiles=input.readInt();
                        System.out.println(nooffiles+"   files");
                        String ccolor=(color==0?"black":"color");PrintWriter rr=new PrintWriter(new FileOutputStream(new File("logfile.txt"),true));
                            PrintWriter logger=new PrintWriter(new FileOutputStream(new File("logger.txt"),true)); 
                            Scanner sid=new Scanner(new File("ID.txt"));
                            int id=Integer.parseInt(sid.next());
                            System.out.println("id "+id);
                            
                            PrintWriter pid=new PrintWriter(new File("ID.txt"));
                                   id++;
                                pid.write(""+id);
                                    pid.flush();
                                    int ptr=0;
                     while(ptr<nooffiles)
                     {
                         System.out.println("iteration "+ ptr);
                         int sendcode=input.readInt();
                         int length1=input.readInt();
                         int length=(int) length1;
                         System.out.println(sendcode+"   and "+length);
                         switch(sendcode)
                        {
                            case 1: {
                                    System.out.println("TEXT");
                                    logger.write("\r\n"+id+"::"+"TEXT"+"::"+copies+"::"+ccolor);
                                    logger.flush();
                                    rr.write("\r\n"+id+"::"+"TEXT"+"::"+copies+"::"+ccolor);
                                    rr.flush();
                                    String filename="temptextfile"+ptr+".txt";
                                    OutputStream outputpdf = new FileOutputStream(filename);
                                    System.out.println("Available bytes in file: "+input.available());
                                      byte[] tempbyte=new byte[length];
                                     int ccount=0;
                                      input.readFully(tempbyte,0,length);
                                      ccount=tempbyte.length;
                                      if(ccount!=length){
                                     System.out.println("error");
                                      }
                                      else
                                      {
                                          System.out.println("count "+ccount);
                                          outputpdf.write(tempbyte,0,ccount);
                                      }
                                    outputpdf.flush();
                                    openconvert(filename,"texttopdf.pdf");
                                    printpdf("texttopdf.pdf",copies,color);
                                   // printtext(filename,copies,color);
                                    outputpdf.close();
                                    break;
                                    }
                             case 2:
                                {
                                    System.out.println("IMAGE");
                                    logger.write("\r\n"+id+"::"+"IMAGE"+"::"+copies+"::"+ccolor);
                                    logger.flush();
                                    rr.write("\r\n"+id+"::"+"TEXT"+"::"+copies+"::"+ccolor);
                                    rr.flush();
                                    String filename="tempimage"+ptr+".jpg";
                                    OutputStream outputpdf = new FileOutputStream(filename);
                                    System.out.println("Available bytes in file: "+input.available());
                                      byte[] tempbyte=new byte[length];
                                     int ccount=0;
                                      input.readFully(tempbyte,0,length);
                                      ccount=tempbyte.length;
                                      if(ccount!=length){
                                     System.out.println("error");
                                      }
                                      else
                                      {
                                          System.out.println("count "+ccount);
                                          outputpdf.write(tempbyte,0,ccount);
                                      }
                                    outputpdf.flush();
                                    printimage(filename,copies,color);
                                    outputpdf.close();
                                    break;
                                    }
                            case 3:
                            {
                                  System.out.println("PPT");
                                    logger.write("\r\n"+id+"::"+"PPT"+"::"+copies+"::"+ccolor);
                                    logger.flush();
                                    rr.write("\r\n"+id+"::"+"PPT"+"::"+copies+"::"+ccolor);
                                    rr.flush();
                                    String filename="tempppt"+ptr+".ppt";
                                    OutputStream outputpdf = new FileOutputStream(filename);
                                    System.out.println("Available bytes in file: "+input.available());
                                      byte[] tempbyte=new byte[length];
                                     int ccount=0;
                                      input.readFully(tempbyte,0,length);
                                      ccount=tempbyte.length;
                                      if(ccount!=length){
                                     System.out.println("error");
                                      }
                                      else
                                      {
                                          System.out.println("count "+ccount);
                                          outputpdf.write(tempbyte,0,ccount);
                                      }
                                    outputpdf.flush();
                                    printppt(filename,copies,color);
                                    outputpdf.close();
                                       break;
                            }
                            case 4: 
                            {
                                    System.out.println("WORD");
                                    logger.write("\r\n"+id+"::"+"WORD"+"::"+copies+"::"+ccolor);
                                    logger.flush();
                                    rr.write("\r\n"+id+"::"+"WORD"+"::"+copies+"::"+ccolor);
                                    rr.flush();
                                    String filename="tempword"+ptr+".docx";
                                    OutputStream outputpdf = new FileOutputStream(filename);
                                    System.out.println("Available bytes in file: "+input.available());
                                      byte[] tempbyte=new byte[length];
                                     int ccount=0;
                                      input.readFully(tempbyte,0,length);
                                      ccount=tempbyte.length;
                                      if(ccount!=length){
                                     System.out.println("error");
                                      }
                                      else
                                      {
                                          System.out.println("count "+ccount);
                                          outputpdf.write(tempbyte,0,ccount);
                                      }
                                    outputpdf.flush();
                                    System.out.println("Converting...");
                                    openconvert(filename,"wordtopdf.pdf");
                                    printpdf("wordtopdf.pdf",copies,color);
                                    outputpdf.close();
                                       break;
                            }
                            case 5:
                            {
                                    System.out.println("PDF ");
                                    logger.write("\r\n"+id+"::"+"PDF"+"::"+copies+"::"+ccolor);
                                    logger.flush();
                                    rr.write("\r\n"+id+"::"+"PDF"+"::"+copies+"::"+ccolor);
                                    rr.flush();
                                     String filename="temppdf"+ptr+".pdf";
                                    OutputStream outputpdf = new FileOutputStream(filename);
                                    System.out.println("Available bytes in file: "+input.available());
                                      byte[] tempbyte=new byte[length];
                                     int ccount=0;
                                      input.readFully(tempbyte,0,length);
                                      ccount=tempbyte.length;
                                      if(ccount!=length){
                                     System.out.println("error");
                                      }
                                      else
                                      {
                                          System.out.println("count "+ccount);
                                          outputpdf.write(tempbyte,0,ccount);
                                      }
                                    outputpdf.flush();
                                    printpdf(filename,copies,color);
                                    outputpdf.close();
                                       break;
                            }
                             case 6:
                            {
                                    System.out.println("EXCEL");
                                    logger.write("\r\n"+id+"::"+"excel"+"::"+copies+"::"+ccolor);
                                    logger.flush();
                                    rr.write("\r\n"+id+"::"+"excel"+"::"+copies+"::"+ccolor);
                                    rr.flush();
                                   String filename="tempexcel"+ptr+".xlsx";
                                    OutputStream outputpdf = new FileOutputStream(filename);
                                    System.out.println("Available bytes in file: "+input.available());
                                      byte[] tempbyte=new byte[length];
                                     int ccount=0;
                                      input.readFully(tempbyte,0,length);
                                      ccount=tempbyte.length;
                                      if(ccount!=length){
                                     System.out.println("error");
                                      }
                                      else
                                      {
                                          System.out.println("count "+ccount);
                                          outputpdf.write(tempbyte,0,ccount);
                                      }
                                    outputpdf.flush();
                                    //printexcel(filename,copies,color);
                                    outputpdf.close();
                                        break;
                            }
                             case 7:
                             {
                                    System.out.println("EXCEL");
                                    logger.write("\r\n"+id+"::"+"excel"+"::"+copies+"::"+ccolor);
                                    logger.flush();
                                    rr.write("\r\n"+id+"::"+"excel"+"::"+copies+"::"+ccolor);
                                    rr.flush();
                                   String filename="tempexcel"+ptr+".xls";
                                    OutputStream outputpdf = new FileOutputStream(filename);
                                    System.out.println("Available bytes in file: "+input.available());
                                      byte[] tempbyte=new byte[length];
                                     int ccount=0;
                                      input.readFully(tempbyte,0,length);
                                      ccount=tempbyte.length;
                                      if(ccount!=length){
                                     System.out.println("error");
                                      }
                                      else
                                      {
                                          System.out.println("count "+ccount);
                                          outputpdf.write(tempbyte,0,ccount);
                                      }
                                    outputpdf.flush();
                                    //printexcel(filename,copies,color);
                                    outputpdf.close();
                                        break;
                                 
                             }
                            default:
                                break;
                    
                        }
                         ptr++;
                     }
                      
            }
        catch (Exception ex) 
        {
              // JOptionPane.showMessageDialog(null, "Exception "+ex);
            informusernegative();
           System.out.println(ex.getStackTrace());
           System.out.println(ex.toString());
           
        }
        finally
        {
            
            try {
                client.close();
                server.close();
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    }
    public void stop()
    {
        exit=false;
        System.out.println("Server Stopped");
    }
   
    
    
    private void printtext(String filename,int copies,int ncolor) throws IOException {
        for(int h=0;h<copies;h++){
         Process process  = Runtime.getRuntime().exec("notepad.exe /p "+filename+"");
        }
        System.out.println("File Successfully Printed");
    }

    private void printpdf(String filename,int copies,int ncolor) {
        try
        {
        PDDocument document = PDDocument.load(new File(filename));

       // PrintService myPrintService = findPrintService("My Windows printer Name");

        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPageable(new PDFPageable(document));
        //job.setPrintService(myPrintService);
        PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet();
        attributes.add(new Copies(copies));
       System.out.println("the value "+ncolor);
        
        if(ncolor==1)
           attributes.add(Sides.ONE_SIDED);
        else
            attributes.add(Sides.TWO_SIDED_LONG_EDGE);
        attributes.add(OrientationRequested.PORTRAIT);
        attributes.add(MediaSizeName.ISO_A4);
        job.print(attributes);
        
        }
        catch(Exception e)
        {
            System.out.println(e.toString());
        }
    }
     

    private void printimage(String filename,int copies,int ncolor) throws FileNotFoundException, PrintException, IOException 
    {
      PrintService ps=PrintServiceLookup.lookupDefaultPrintService();
      DocPrintJob job=ps.createPrintJob();    
        PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet();
         attributes.add(new Copies(copies));
         
            if(ncolor==1)
            attributes.add(Sides.ONE_SIDED);
            else
               attributes.add(Sides.TWO_SIDED_LONG_EDGE);
      System.out.println("Printing to " + ps);
    FileInputStream fin = new FileInputStream(filename);
    Doc doc = new SimpleDoc(fin, DocFlavor.INPUT_STREAM.AUTOSENSE, null);
    job.print(doc,attributes);
    fin.close();
    }   
        
    private void printppt(String filename,int noofcopies, int color) throws IOException {
        for(int i=0;i<noofcopies;i++)
        Desktop.getDesktop().print(new File(filename));
        System.out.println("File Successfully Printed");
    }
   
    
    public void openconvert(String filename,String dest) throws FileNotFoundException, IOException
    {
        
        /*InputStream docxInputStream = new FileInputStream(new File(filename));
            OutputStream outputStream = new FileOutputStream(new File(dest));
            IConverter converter = LocalConverter.builder().build();
            converter.convert(docxInputStream).as(DocumentType.DOCX).to(outputStream).as(DocumentType.PDF).execute();
            outputStream.close();
*/
        File doc = new File(filename);
        try {
            WordprocessingMLPackage wordMLPackage = WordprocessingMLPackage.load(doc);
            FileOutputStream stream=new FileOutputStream(dest);
            Docx4J.toPDF(wordMLPackage,stream );
            stream.close();
        } catch (Exception ex) {
            System.out.println("error message : "+ex);
            }
    }

        private void informuser() {
               // JOptionPane.showMessageDialog(null,"Server Started");
                      jToggleButton1.setText("Running");
                         flag=false;
                         System.out.println("Running state");
        }

        private void informusernegative() {
            flag=true;
                System.out.println("Server Can't Be Started ");
                //JOptionPane.showMessageDialog(null, "Server can't start.Please Try Again.....");
                jToggleButton1.setText("Start");
                                restart();

        }
    
}


    
}

//...............................................................
